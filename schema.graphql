type Election {
    _id: ID
    title: String
    description: String
    races: [Race]
    startDate: DateTime
    endDate: DateTime
    votes: [Vote]
}


type Race {
    _id: ID
    name: String
    description: String
    electionItems: [ElectionItem] #override fields to make sure it is getting it from specific destination (electionItem and raceVote)
    winner: ElectionItem
    raceVotes: [RaceVote]
}

type User {
    _id: ID
    name: String
    votes: [Vote]
    electionsParticipatedIn: [Election]
}

interface ElectionItem {
    _id: ID!
    name: String!
    race: Race!
}

type Candidate implements ElectionItem {
    _id: ID!
    name: String!
    race: Race!
    description: String!
    image: Url!
}

#teeshirts or such
type Item implements ElectionItem {
    _id: ID!
    name: String!
    race: Race!
    image: Url!
}

type Amendment implements ElectionItem {
    _id: ID!
    name: String!
    race: Race!
    description: String!
    options: String
}

type Vote {
    _id: ID!
    raceVotes: [RaceVote]
    date: DateTime
    success: Boolean
}

type RaceVote {
    electionItem: ElectionItem
    race: Race
}

scalar DateTime
scalar Url

#read
type Query {
    electionLookup(_id: ID, title: String): Election
    raceLookup(_id: ID): Race #might be unnecessary
    userLookup: User 
    electionItemLookup(_id: ID): ElectionItem
    
}

#the post requests
type Mutation { 
    createTopic(topicMemo: String!): ID!
    submitVote(raceID: [ID!]!): Vote
    createElection(title: String, _id: ID): Election
}
